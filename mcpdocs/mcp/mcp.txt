# Guides

- [MCP Protocol Overview](https://modelcontextprotocol.io/introduction): Introduction to the Model Context Protocol (MCP), its goals, components (tools, resources, prompts), and how it enables LLM tooling.
- [Quickstart: Getting Started with MCP Server](https://modelcontextprotocol.io/quickstart/server): Step‑by‑step setup guide—including installation (`pip install mcp`), creating your first server, and running locally with the inspector.
- [Defining Tools (`@mcp.tool`) Best Practices](https://modelcontextprotocol.io/docs/concepts/tools): How to write action‑oriented tool functions—decorators, metadata, error handling, type hints, and examples.
- [Defining Resources (`@mcp.resource`)](https://modelcontextprotocol.io/specification/2025-06-18/architecture): Designing readonly fetch endpoints—URL templates, JSON return types, schema usage, and versioning guidance.
- [Using Prompt Templates (`@mcp.prompt`)](https://modelcontextprotocol.io/specification/2025-06-18): Optional prompt patterns for advanced workflows—use cases, syntax, and integration examples.
- [Security and Authentication](https://en.wikipedia.org/wiki/Model_Context_Protocol): OAuth 2.1, token‑based access, input validation, sandboxing tools, and the permissions model.
- [Examples: Calculator, Slack Bot, DB API](https://github.com/modelcontextprotocol/quickstart-resources): Full examples showcasing typical MCP servers: calculator, email sender, Slack integration, and CRUD APIs.
- [Best Practices & Architecture](https://modelcontextprotocol.io/specification/2025-06-18/architecture): Naming conventions, minimal API surface, error handling, observability, versioning, and performance guidelines.
- [Deployment & CI/CD](https://modelcontextprotocol.io/specification/2025-06-18): Running with `mcp run --transport http`, using Docker, serverless (Cloudflare/AWS Lambda), automated tests, and CI pipelines.
- [Tools & Ecosystem](https://modelcontextprotocol.io): MCP Inspector, mcp-doc server, community SDKs, adapters (e.g. LangGraph integration), and plugin lists.
- [Tutorial: Integrate MCP with LLM Agents](https://openai.github.io/openai-agents-python/mcp/): Guide showing how to wrap your MCP endpoints in agents (LangChain, LangGraph, etc.), using fetch_logs/fetch_docs, memory patterns.
- [Advanced: Stateful Sessions & Time Travel](https://modelcontextprotocol.io/specification/2025-06-18/architecture): Implementing context retention, checkpoints, time‑travel debugging with inspectors.
- [Reference: Full Protocol Spec](https://modelcontextprotocol.io/specification/2025-06-18): Detailed JSON schemas, transport formats (HTTP, stdio), error‑response formats, and version compatibility.
- [Reference: CLI & Inspector Commands](https://modelcontextprotocol.io/specification/2025-06-18): Descriptions of `mcp dev`, `mcp run`, inspection, logging flags, and debugging workflows.
- [Changelog & Release Notes](https://modelcontextprotocol.io/specification/2025-06-18/changelog): List of versions, new features, schema changes, and deprecation notices.